#pragma checksum "D:\Users\User\Desktop\repozytorium\BattleshipGame\BattleshipGame\Views\Game\Battleship.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bdcace27cbc6fedef27f7f3f5d4b92bc762d2a3c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Game_Battleship), @"mvc.1.0.view", @"/Views/Game/Battleship.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Users\User\Desktop\repozytorium\BattleshipGame\BattleshipGame\Views\_ViewImports.cshtml"
using BattleshipGame;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Users\User\Desktop\repozytorium\BattleshipGame\BattleshipGame\Views\_ViewImports.cshtml"
using BattleshipGame.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bdcace27cbc6fedef27f7f3f5d4b92bc762d2a3c", @"/Views/Game/Battleship.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f3f18e7eac5cb37899935c977ab3e690f105c62b", @"/Views/_ViewImports.cshtml")]
    public class Views_Game_Battleship : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<section>
    <div class=""ml-auto mr-auto title"">
        <span>Battleship</span>
    </div>
    <div class=""ml-auto mr-auto start"">
        <button onclick=""startGame();"" type=""button"" class=""btn"">Start simulation</button>
    </div>
    <div class=""cards"">
        <!--You-->
        <div id=""yourBoard"" class=""card"">
            <div class=""spinner-border text-primary"" role=""status"" style=""display:none"">
                <span class=""sr-only"">Loading...</span>
            </div>
            <span class=""positionHorizontal"">1 &nbsp;&ensp; 2 &ensp; 3 &nbsp;&nbsp; 4 &nbsp;&nbsp; 5 &nbsp;&nbsp; 6 &nbsp;&nbsp; 7 &nbsp;&ensp; 8 &nbsp;&nbsp; 9 &nbsp; 10</span>
            <ul class=""positionVertical""><li>A</li><li style=""margin-top:-2px;"">B</li><li style=""margin-top:-2px;"">C</li><li style=""margin-top:-2px;"">D</li><li style=""margin-top:-2px;"">E</li><li>F</li><li style=""margin-top:-2px;"">G</li><li style=""margin-top:-2px;"">H<li style=""margin-top:-3px;"">I</li><li style=""margin-top:-2px;"">J</li></ul>
");
            WriteLiteral(@"            <span class=""player"">You</span>
            <div class=""spinner-grow text-light"" role=""status"">
                <span class=""sr-only"">Loading...</span>
            </div>
        </div>

        <!--Bot-->
        <div id=""botBoard"" class=""card"">
            <i class=""fas fa-eye""></i>
            <i class=""fas fa-eye-slash""></i>
            <div class=""spinner-border text-primary"" role=""status"" style=""display:none"">
                <span class=""sr-only"">Loading...</span>
            </div>
            <span class=""positionHorizontal"">1 &nbsp;&ensp; 2 &ensp; 3 &nbsp;&nbsp; 4 &nbsp;&nbsp; 5 &nbsp;&nbsp; 6 &nbsp;&nbsp; 7 &nbsp;&ensp; 8 &nbsp;&nbsp; 9 &nbsp; 10</span>
            <ul class=""positionVertical""><li>A</li><li style=""margin-top:-2px;"">B</li><li style=""margin-top:-2px;"">C</li><li style=""margin-top:-2px;"">D</li><li style=""margin-top:-2px;"">E</li><li>F</li><li style=""margin-top:-2px;"">G</li><li style=""margin-top:-2px;"">H<li style=""margin-top:-3px;"">I</li><li style=""margin-top:-2");
            WriteLiteral("px;\">J</li></ul>\r\n");
            WriteLiteral(@"            <span class=""player"">Bot</span>
            <div id=""test"" class=""spinner-grow text-light"" role=""status"">
                <span class=""sr-only"">Loading...</span>
            </div>
        </div>
    </div>


    <!--animation-->
    <div class=""waves"">
        <div class=""wave wave1""></div>
        <div class=""wave wave2""></div>
        <div class=""wave wave3""></div>
        <div class=""wave wave4""></div>
    </div>
</section>

");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        $(document).ready(function () {
            for (var i = 0; i < 10; i++) {
                for (var j = 0; j < 10; j++) {
                    $('#yourBoard').append('<div id=""' + ""you"" + i + j + '"" class=""field""></div>');
                    $('#botBoard').append('<div id=""' + ""bot"" + i + j + '"" class=""field""></div>');
                }
            }
        });
        function generateShips() {
            $.ajax({
                url: '/Game/GenerateBoards',
                type: 'GET',
                dataType: 'json',
                success: function (data) {

                    for (var i = 0; i < data.yourShips.length; i++) {
                        var isHorizontal = data.yourShips[i].isHorizontal;
                        if (isHorizontal) {
                            var indexMinH = Math.min(...data.yourShips[i].positions.map(position => position.horizontal));
                            var indexMaxH = Math.max(...data.yourShips[i]");
                WriteLiteral(@".positions.map(position => position.horizontal));
                        }
                        else {
                            var indexMinV = Math.min(...data.yourShips[i].positions.map(position => position.vertical));
                            var indexMaxV = Math.max(...data.yourShips[i].positions.map(position => position.vertical));
                        }


                        for (var j = 0; j < data.yourShips[i].positions.length; j++) {
                            var positionHorizontal = data.yourShips[i].positions[j].horizontal;
                            var positionVertical = data.yourShips[i].positions[j].vertical;

                            if (isHorizontal) {
                                switch (positionHorizontal) {
                                    case indexMinH:
                                        $('#you' + positionVertical + positionHorizontal).append('<div class=""shipHorizontalLeft""></div>');
                                        break;
     ");
                WriteLiteral(@"                               case indexMaxH:
                                        $('#you' + positionVertical + positionHorizontal).append('<div class=""shipHorizontalRight""></div>');
                                        break;
                                    default:
                                        $('#you' + positionVertical + positionHorizontal).append('<div class=""shipHorizontalMid""></div>');
                                }
                            }
                            else {
                                switch (positionVertical) {
                                    case indexMinV:
                                        $('#you' + positionVertical + positionHorizontal).append('<div class=""shipVerticalUp""></div>');
                                        break;
                                    case indexMaxV:
                                        $('#you' + positionVertical + positionHorizontal).append('<div class=""shipVerticalDown""></div>');
       ");
                WriteLiteral(@"                                 break;
                                    default:
                                        $('#you' + positionVertical + positionHorizontal).append('<div class=""shipVerticalMid""></div>');
                                }
                            }
                        }

                    }
                },
                error: function () {
                    alert('Przepraszamy, wystąpił problem!');
                },
                complete: function () {
                    $('.spinner-border').hide();
                }
            });
        }
        function startGame() {
            $('.spinner-border').show();
            setTimeout(generateShips, 500);

        }

    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
